package co.blocke.scalabars

import fastparse._, ScalaWhitespace._

case class ArgsParser() {

  private def template[_: P] = P(renderable.repX)

  private def renderable[_: P]: P[Renderable] = P(strChars | comment | dynammicPartial | partial | !(openHelperBlock) ~ section | helperBlock | inverted | !tryCloseBlock ~ variable)

  private def openBlock[_: P] = P("{{#" ~/ tag.! ~ "}}\n")
  private def openNegBlock[_: P] = P("{{^" ~/ tag.! ~ "}}\n")
  private def openHelperBlock[_: P] = P("{{#" ~/ tag.rep(2) ~ "}}").map(_.toList)
  private def tag[_: P]: P[String] = CharsWhileIn("""./_a-zA-Z0-9""").!
  private def closeBlock[_: P](closeLabel: String) = P("{{/" ~/ closeLabel ~ "}}\n")
  private def tryCloseBlock[_: P] = P("{{/")

  private def variable[_: P] = P(unescapedVariable | escapedVariable)
  private def escapedVariable[_: P] = P("{{" ~/ tag.! ~ "}}").map(v => Variable(v, true))
  private def unescapedVariable[_: P] = P("{{{" ~/ tag.! ~ "}}}").map(v => Variable(v, false))

  private def partial[_: P] = P("{{>" ~/ tag.! ~ "}}").map(Partial(_, false))
  private def dynammicPartial[_: P] = P("{{>" ~ "(" ~ tag.! ~ ")" ~ "}}").map(Partial(_, true))

  private def strChars[_: P] = P(CharsWhile(_ != '{').!).map(Text(_))

  private def comment[_: P] = P("{{!" ~/ CharPred(_ != '}').rep ~ "}}\n").map(_ => Comment())
  private def helperBlock[_: P] = P(
    for {
      helper <- openHelperBlock
      block <- renderable.rep ~ closeBlock(helper.head)
    } yield Helper(helper.head, helper.tail, block.toList)
  )

  private def section[_: P] = P(
    for {
      label <- openBlock
      block <- renderable.repX ~ closeBlock(label)
    } yield Section(label, block.toList)
  )

  def inverted[_: P] = P(
    for {
      label <- openNegBlock
      block <- renderable.rep ~ closeBlock(label)
    } yield Inverted(label, block.toList)
  )

  def parseArgs(in: String) = parse(in, template(_))
}
//private def args[_: P] = P(tag.!.rep).map(_.toList)
//private def ws[_: P] = P(CharIn(" \t").rep)

